#!/usr/bin/env node
const fs = require("node:fs/promises");
const path = require("node:path");
const circuitConfigs = require("../lib/circuitConfigs.js");
const { pathExists, circuitConfigToName } = require("../lib/shared.js");

// Constants
const GENERATED_DIR = path.join(__dirname, "../src/generated");

// Circuit template
function template(nInputs, nOutputs) {
  return `pragma circom 2.0.6;
include "../library/joinsplit.circom";

component main{public [merkleRoot, boundParamsHash, nullifiers, commitmentsOut]} = JoinSplit(${nInputs}, ${nOutputs}, 16);
`;
}

async function main() {
  // Delete generated dir if exists
  if (pathExists(GENERATED_DIR))
    await fs.rm(GENERATED_DIR, { recursive: true, force: true });

  // Create generated dir
  await fs.mkdir(GENERATED_DIR);

  for (const circuitConfig of circuitConfigs) {
    // Throw if trying to generate a circuit combination with more than max poseidon inputs for signature check
    if (circuitConfig.nullifiers + circuitConfig.commitments + 2 + 1 > 17)
      throw new Error("Invalid combination");

    // Get circuit name
    const name = circuitConfigToName(circuitConfig);

    // Write generated circuit to file
    await fs.writeFile(
      path.join(GENERATED_DIR, `${name}.circom`),
      template(circuitConfig.nullifiers, circuitConfig.commitments)
    );
  }
}

void main();
