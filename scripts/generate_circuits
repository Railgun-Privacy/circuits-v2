#!/usr/bin/env node
const fs = require('node:fs');
const path = require('node:path');

const circuitConfigs = require('../circuitConfigs');

// Circuit template
function template(nInputs, nOutputs) {
  return `pragma circom 2.0.6;
include "../library/joinsplit.circom";

component main{public [merkleRoot, boundParamsHash, nullifiers, commitmentsOut]} = JoinSplit(${nInputs}, ${nOutputs}, 16);
`;
}

// Calculate path to generated circuits directory
const generatedDir = path.join(__dirname, '../src/generated');

// Create generated circuits directory if not exist
if (!fs.existsSync(generatedDir)) {
  fs.mkdirSync(generatedDir);
}

for (const { commitmentCount, nullifierCount } of circuitConfigs) {
  // Throw if trying to generate a circuit combination with more than max poseidon inputs for signature check
  if (nullifierCount + commitmentCount + 2 + 1 > 17) throw new Error('Invalid combination');

  // Stringify nullifier and commitment counts
  const nullifierCountStr = nullifierCount.toString().padStart(2, '0');
  const commitmentCountStr = commitmentCount.toString().padStart(2, '0');

  // Write generated circuit to file
  fs.writeFileSync(path.join(generatedDir, `joinsplit_${nullifierCountStr}x${commitmentCountStr}.circom`), template(nullifierCount, commitmentCount));
}
