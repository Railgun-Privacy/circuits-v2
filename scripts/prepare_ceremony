#!/usr/bin/env node
const os = require("node:os");
const fs = require("node:fs/promises");
const process = require("node:process");
const path = require("path");
const circuitConfigs = require("../lib/circuitConfigs");
const {
  circuitConfigToName,
  processParallel,
  pathExists,
  cliArguments,
  run,
  runWorker,
} = require("../lib/shared");

// Constants
const INSTALL_DIR = path.join(__dirname, "../bin");
const DST_DIR = path.join(__dirname, "../build");
const SEED_DIR = path.join(__dirname, "../zkeys");
const POT_PATH = path.join(INSTALL_DIR, "pot.ptau");
const POT_URL =
  cliArguments()["pot"] ||
  "https://storage.googleapis.com/zkevm/ptau/powersOfTau28_hez_final_20.ptau";

async function main() {
  // Print help and exit if help flag
  if (cliArguments()["help"]) {
    console.log("Usage: ./scripts/prepare_ceremony [OPTIONS]");
    console.log("Options:");
    console.log(
      "  --force     Force redownload of ptau and regeneration of all zkeys",
    );
    console.log(
      `  --pot       Specify the URL for the powers of tau file (default: ${POT_URL})`,
    );
    console.log("  --verbose   Enable verbose output");
    console.log("  --help      Show this help message");
    process.exit();
  }

  // Download ptau file if not exist (always download if force flag set)
  if (!pathExists(POT_PATH) || cliArguments()["force"]) {
    console.log("Download powers of tau phase 1");
    await run(
      `curl`,
      ["-L", POT_URL, "-o", POT_PATH],
      cliArguments()["verbose"],
    );
  }

  // Make zkey directory if doesn't exist
  if (!pathExists(SEED_DIR)) await fs.mkdir(SEED_DIR);

  // Create queue for generating zkeys
  const queue = circuitConfigs.map((circuit) => {
    return async () => {
      const name = circuitConfigToName(circuit);

      // Get paths
      const r1cs = path.join(DST_DIR, `${name}.r1cs`);
      const zkey = path.join(SEED_DIR, `${name}.zkey`);

      // Generate zkey if not exist (always generate if force flag set)
      if (!pathExists(zkey) || cliArguments()["force"]) {
        console.log(`Generating ${name}.zkey`);
        await runWorker.parent(
          path.join(__dirname, "child_process/zkey_create.js"),
          {
            r1cs,
            ptau: POT_PATH,
            zkey,
            print: cliArguments()["verbose"],
          },
        );
        console.log(`${name}.zkey generated`);
      } else {
        console.log(`${name}.zkey already exists`);
      }
    };
  });

  // Generate zkeys
  await processParallel(queue);
}

void main();
