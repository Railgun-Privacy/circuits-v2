#!/usr/bin/env node
const fs = require("node:fs/promises");
const path = require("node:path");
const circuitConfigs = require("../lib/circuitConfigs.js");
const {
  pathExists,
  circuitConfigToName,
  runWorker,
  processParallel,
  run,
} = require("../lib/shared.js");

// Constants
const CEREMONY_EXPORT = path.join(__dirname, "../ceremony-export");
const PACKAGE_TEMPLATE = path.join(__dirname, "../package-template");
const EXPORT_DIR = path.join(__dirname, "../export");
const PACKAGE_TMP_WORKING = path.join(EXPORT_DIR, "package-tmp");
const PACKAGE_DIR = path.join(EXPORT_DIR, "package");
const PROVER_DIR = path.join(EXPORT_DIR, "prover");
const BUILD_DIR = path.join(__dirname, "../build");

async function main() {
  // Check if ceremony export exists
  if (!pathExists(CEREMONY_EXPORT)) {
    console.log(`Expected ceremony export to be present in ${CEREMONY_EXPORT}`);
    process.exit(1);
  }

  // Remove export dir if exists
  if (pathExists(EXPORT_DIR))
    await fs.rm(EXPORT_DIR, { recursive: true, force: true });

  // Make snarkjs and native prover directory (recursively creating export dir)
  console.log("\nCREATING PROVER EXPORT DIRECTORY");
  await fs.mkdir(path.join(PROVER_DIR, "snarkjs"), { recursive: true });
  await fs.mkdir(path.join(PROVER_DIR, "native"), { recursive: true });

  // Loop through each circuit and assemble compression tasks
  const compressionQueue = [];
  for (const circuitConfig of circuitConfigs) {
    const name = circuitConfigToName(circuitConfig);

    // Add wasm file compression to queue
    compressionQueue.push(() => {
      console.log(`Compressing ${name}.wasm`);
      return runWorker.parent(
        path.join(__dirname, "child_process/compress_file.js"),
        {
          source: path.join(BUILD_DIR, `${name}_js/${name}.wasm`),
          destination: path.join(PROVER_DIR, `snarkjs/${name}.wasm.br`),
        }
      );
    });

    // Add dat file compression to queue
    compressionQueue.push(() => {
      console.log(`Compressing ${name}.dat`);
      return runWorker.parent(
        path.join(__dirname, "child_process/compress_file.js"),
        {
          source: path.join(BUILD_DIR, `${name}_cpp/${name}.dat`),
          destination: path.join(PROVER_DIR, `native/${name}.dat.br`),
        }
      );
    });
  }

  console.log("\nCOMPRESSING FILES");
  await processParallel(compressionQueue);

  // Copy package template
  console.log("\nCOPYING PACKAGE TEMPLATE TO EXPORT DIRECTORY");
  await fs.cp(PACKAGE_TEMPLATE, PACKAGE_TMP_WORKING, { recursive: true });

  // Copy circuit configs
  await fs.cp(
    path.join(__dirname, "../lib/circuitConfigs.js"),
    path.join(PACKAGE_TMP_WORKING, "circuitConfigs.js"),
    { recursive: true }
  );

  // Create circuits folder
  await fs.mkdir(path.join(PACKAGE_TMP_WORKING, "circuits"));

  console.log("\nASSEMBLING PACKAGE");

  // Loop through each circuit
  for (const circuitConfig of circuitConfigs) {
    const name = circuitConfigToName(circuitConfig);

    // Create circuit folder
    await fs.mkdir(path.join(PACKAGE_TMP_WORKING, "circuits", name));

    // Copy zkey, vkey, and wasm
    console.log(`Copying zkey, vkey, and wasm for ${name}`);
    await fs.cp(
      path.join(CEREMONY_EXPORT, "circuits", name, "zkey.br"),
      path.join(PACKAGE_TMP_WORKING, "circuits", name, "zkey.br")
    );
    await fs.cp(
      path.join(CEREMONY_EXPORT, "circuits", name, "vkey.json"),
      path.join(PACKAGE_TMP_WORKING, "circuits", name, "vkey.json")
    );
    await fs.cp(
      path.join(PROVER_DIR, `snarkjs/${name}.wasm.br`),
      path.join(PACKAGE_TMP_WORKING, "circuits", name, "wasm.br")
    );
  }

  // Pack package
  console.log("\nPACKING PACKAGE");

  // Make package dir and npm pack package
  await fs.mkdir(path.join(PACKAGE_DIR));
  await run(
    "npm",
    ["pack", "--pack-destination", PACKAGE_DIR],
    { cwd: PACKAGE_TMP_WORKING },
    true
  );

  // Remove package tmp working dir
  await fs.rm(PACKAGE_TMP_WORKING, { recursive: true, force: true });

  // Copy cereomny output to export dir
  console.log("\nCOPYING CEREMONY OUTPUT TO EXPORT DIRECTORY");
  await fs.cp(
    path.join(CEREMONY_EXPORT, "circuits"),
    path.join(EXPORT_DIR, "circuits"),
    { recursive: true }
  );
  await fs.cp(
    path.join(CEREMONY_EXPORT, "transcripts"),
    path.join(EXPORT_DIR, "transcripts"),
    { recursive: true }
  );
}

void main();
